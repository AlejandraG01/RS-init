#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Wed Oct 18 09:46:49 2017

@author: alejandra
"""
from numpy import *

rand_matrix = random.randint(10, size = (10, 5))
print rand_matrix

flattened = rand_matrix.T.flatten()
print flattened


rand_matrix_2 = random.randint(10, size = (5,2))
print rand_matrix_2
dot_product = rand_matrix.dot(rand_matrix_2)
print dot_product


num_users =  5
num_movies = 10

ratings = random.randint(11, size=(num_movies, num_users))

print "ratings {}" .format(ratings)

# create a logical matrix 
#(matrix that represents whether a rating was made, or not)
# != is the logical not operator

did_rate = (ratings != 0) * 1
print "matriz logical de ratings {}" .format(did_rate)

print (ratings!=0)

print (ratings!=0)*1

ratings.shape

# Let's make some ratings. A 10 X 1 column vector to store all the ratings I make

nikhil_ratings = zeros((num_movies, 1))
print nikhil_ratings
nikhil_ratings[0] = 8
nikhil_ratings[4] = 7
nikhil_ratings[7] = 3

print nikhil_ratings

ratings = append(nikhil_ratings, ratings, axis = 1)
did_rate = append(((nikhil_ratings != 0) * 1), did_rate, axis = 1)
print ratings
print did_rate


def normalize_ratings(ratings, did_rate):
    num_movies = ratings.shape[0]
    
    ratings_mean = zeros(shape = (num_movies, 1))
    ratings_norm = zeros(shape = ratings.shape)
    
    for i in range(num_movies): 
        idx= where(did_rate[i] ==1)[0]
        ratings_mean[i] = mean(ratings[i, idx])
        ratings_norm[i, idx] = ratings[i, idx] - ratings_mean[i]
        
    return ratings_norm, ratings_mean


normal_ratings, media_ratings = normalize_ratings(ratings,did_rate)
print "normal ratings {}" .format(normal_ratings)
print "valor medio de ratings {}" .format(media_ratings)

num_users = ratings.shape[1]
num_features = 3

# Simple explanation of what it means to 'vectorize' a linear regression

X = array([[1, 2], [1, 5], [1, 9]])
Theta = array([[0.23], [0.34]])

print X
print Theta

Y = X.dot(Theta)
print Y

movie_features = random.randn( num_movies, num_features )
user_prefs = random.randn( num_users, num_features )
initial_X_and_theta = r_[movie_features.T.flatten(), user_prefs.T.flatten()]

print movie_features
print user_prefs
print initial_X_and_theta

initial_X_and_theta.shape
movie_features.T.flatten().shape
user_prefs.T.flatten().shape
initial_X_and_theta


        

































